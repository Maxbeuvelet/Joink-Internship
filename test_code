from arcgis import GIS
from arcgis.features import FeatureLayerCollection
from arcgis.features import FeatureLayer
from PIL import Image
from PyPDF2 import PdfMerger
from fpdf import FPDF
from PIL import Image, ExifTags
import os
pdf = FPDF()
pdf.add_page()
FPDF.add_page
pdf.set_font("Times", size = 15)




gis = GIS('home')
int_point = gis.content.get('e3796b16d9484709963a1cc2984cf325')



search_results = gis.content.search('title: FTTH TQ','Feature Layer')
picture = search_results[0]

# Prints Feature Layer
FTTH = search_results[0]

FTTH

FTTH_layers = FTTH.layers


Number_Order = input("Enter Order Number ")



def install_area():
    layers = FTTH_layers[3]#change number to pick different layer, 0 = Interior point, 1 = Exterior Point etc...
    layers_fset = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    layers_features = layers_fset.features
    query_results = layers.query(where= "OrderNumber = {} ".format(Number_Order))

    

    #--------------Address----------------------
    
    address = layers_features[0].attributes.pop('POC_Address')
    
    pdf.cell(1, 1, txt = "Address:",ln = 1, align = 'L')#Heading, cant figure out what the numbers do
    pdf.cell(200, 10, txt = "{}".format(address),ln = 2, align = 'L')#Information in cell
    pdf.cell(200, 10, txt = "",ln = 1, align = 'L')# This line adds a space inbetween the next one
 

    
    #--------------OrderNumber--------------------

    Order_number = str(layers_features[0].attributes.pop('OrderNumber'))
    
    pdf.cell(200, 10, txt = "Order Number:",ln = 1, align = 'L')
    pdf.cell(200, 10, txt = "{}".format(Number_Order),ln = 2, align = 'L')
    pdf.cell(200, 10, txt = "",ln = 1, align = 'L')
    
    
    #-------------Full Name----------------------
    
    name_first = layers_features[0].attributes.pop('POC_FirstName')
    name_last = layers_features[0].attributes.pop('POC_LastName')

    pdf.cell(200, 10, txt = "Name:",ln = 1, align = 'L')
    pdf.cell(200, 10, txt = "{}".format(name_first+ " " +name_last),ln = 2, align = 'L')
    pdf.cell(200, 10, txt = "",ln = 1, align = 'L')    
    
    
    #-------------CellPhone---------------------
    Phone_number = Order_number = str(layers_features[0].attributes.pop('POC_Phone'))

    pdf.cell(200, 10, txt = "PhoneNumber:",ln = 1, align = 'L')
    pdf.cell(200, 10, txt = "{}".format(Phone_number),ln = 2, align = 'L')
    pdf.cell(200, 10, txt = "",ln = 1, align = 'L')    

    
    #-------------Email----------------------
    Email = layers_features[0].attributes.pop('POC_Email')

    pdf.cell(200, 10, txt = "Email:",ln = 1, align = 'L')
    pdf.cell(200, 10, txt = "{}".format(Email),ln = 2, align = 'L')
    pdf.cell(200, 10, txt = "",ln = 1, align = 'L')    

    
    #-----------information just for OSP--------------
def exterior_point():
    
    layers = FTTH_layers[1]
    layers_fset = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    layers_features = layers_fset.features
    query_results = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    oid  = str(layers_features[0].attributes.pop('OBJECTID'))
    oidd = str(layers_features[1].attributes.pop('OBJECTID'))
    

    
    
    
    TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
    templates ={"FTTH_TQ_CablePlacement":"Template-CablePlacement","FTTH_TQ_ISP":"Template-ISP","FTTH_TQ_OSP":"Template-OSP"}
    for l in templates:

        Layout = templates[l]

        #getting Attachments from AGO
        #Feature Server
        TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
        #Layout Variables
        GISLayouts={"Template-ISP":[0,r'\ISP'], "Template-OSP":[1,r'\OSP'], "Template-CablePlacement":[2,r'\OSP']}
        LayoutV = GISLayouts[Layout]
        LryNum = LayoutV[0]
        ImagePath = LayoutV[1]
        OutputPath = r"C:\Users\max.beuvelet\Desktop\FTTH Project"
        

    TQLayers = TQData.layers[1]
    #query featuers 
    TQFeatureSet = TQLayers.query(where='OrderNumber='+Number_Order,out_fields='OBJECTID')
    #get object ids
    ObjIDs = [x.attributes['OBJECTID'] for x in TQFeatureSet]
    #print(ObjIDs)
    image_list = []


    for ids in ObjIDs:
        arcpy.AddMessage(ids)
        attach = TQLayers.attachments.get_list(oid=ids)
        for att in attach:
            DwnFile = TQLayers.attachments.download(oid=ids, attachment_id=att['id'],save_path=OutputPath+ImagePath )
            arcpy.AddMessage(DwnFile)
            index = len(OutputPath+ImagePath)+1
            NewFileName = DwnFile[0]
            NewFileName = NewFileName[:index] +' ' + str(ids) +' ' + NewFileName[index:]
            image_list.append([NewFileName])

            if os.path.exists(NewFileName):
                os.remove(NewFileName)

            os.rename(DwnFile[0],NewFileName)
            rotate_image(NewFileName)
            
    w = []       
    for items in image_list:
        #Get list of image's
        for index, x in enumerate(items):
            print(index, items)
            # get image numbers
            w.append(x[48:51])
    print(w)
    x = w[5]
    print(x)

    
    #----------ExteriorSheeting----------
    
    Ext_sheet = layers_features[0].attributes.pop('ExteriorSheeting')
    
    pdf.cell(200, 10, txt = "Planned Path:",ln = 1, align = 'L')
    try:
        pdf.cell(200, 10, txt = "{}".format("ID:" + oid +" " + "Exterior Sheeting: "  + Ext_sheet ),ln = 2, align = 'L')
    except:
        pdf.cell(200, 10, txt = "{}".format(" "),ln = 2, align = 'L')


    
    #----------EntryPointDescription----------
    
    Entry_Point = layers_features[0].attributes.pop('EntryPointDescription')
    try:
        pdf.multi_cell(200, 10, txt = "{}".format("ID:" + oid + " "+ "Entry Point: " + Entry_Point), align = 'L')
    except: 
        pdf.cell(200, 10, txt = "{}".format("Entry Point:  "),ln = 2, align = 'L')



        
    #----------Notes----------------------
    
    note = layers_features[0].attributes.pop('Notes')

    try:

        pdf.multi_cell(200, 10, txt = "{}".format("ID:" + oid+ " " + "Notes " + note), align = 'L')
        pdf.cell(200, 10, txt = "",ln = 1, align = 'L')   
    except:
        pdf.cell(200, 10, txt = "{}".format(" "),ln = 2, align = 'L')
        pdf.cell(200, 10, txt = "",ln = 1, align = 'L')        
        

    
    #----------ObstacleType-----------
    pdf.cell(200, 10, txt = "Obstacles:",ln = 1, align = 'L')
    obstacle_type = {'GU': 'Gas Utility', 'WU':'Water Utility', 'EU':'Electric Utility', 'GEO':'Geothermal'}
    for row in layers_features:
        obstacle = row.attributes.pop('ObstacleType')
        if obstacle != None:
            obstacle = obstacle_type[obstacle]
            pdf.cell(200,10, txt = "{}".format("ID:" + oid +" "+ "Obstacle Type: " + obstacle),ln = 2, align = 'L')
        description = row.attributes.pop('ObstacleDescription')
        if description != None:
            pdf.cell(200,10, txt = "{}".format("ID:" + x +" "+ "ObstacleDescription: " + description), ln = 2, align = 'L' )
            pdf.cell(200, 10, txt = "",ln = 1, align = 'L')
    

        
#---------- Referencing Exterior Line-------------------

 


    
def exterior_line():
    layers = FTTH_layers[2]
    layers_fset = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    layers_features = layers_fset.features
    query_results = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    oid  = str(layers_features[0].attributes.pop('OBJECTID'))

    
    #----------Notes---------- 
    Notes = layers_features[0].attributes.pop('Notes')
    
    pdf.cell(200, 10, txt = "Planned Path:",ln = 1, align = 'L')
    pdf.multi_cell(200, 10, txt = "{}".format("ID: " + oid + " " + "Notes: " + Notes), align = 'L')
    

    #----------ObstacleType----------  
    Obstacle_type = layers_features[0].attributes.pop('ObstacleType')
    
    pdf.cell(200, 10, txt = "Obstacle :",ln = 1, align = 'L')
    pdf.cell(200, 10, txt = "{}".format(Obstacle_type),ln = 2, align = 'L')


def picture():

    layers = FTTH_layers[1]
    layers_fset = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    layers_features = layers_fset.features
    query_results = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    pdf.set_font("Times", size = 13)
    
    oid  = str(layers_features[0].attributes.pop('OBJECTID'))
    Ext_sheet = layers_features[0].attributes.pop('ExteriorSheeting')
    Entry_Point = layers_features[0].attributes.pop('EntryPointDescription')
    Notes = layers_features[0].attributes.pop('Notes')

    #pdf.add_page()
    TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
    templates ={"FTTH_TQ_CablePlacement":"Template-CablePlacement","FTTH_TQ_ISP":"Template-ISP","FTTH_TQ_OSP":"Template-OSP"}
    for l in templates:

        Layout = templates[l]

        #getting Attachments from AGO
        #Feature Server
        TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
        #Layout Variables
        GISLayouts={"Template-ISP":[0,r'\ISP'], "Template-OSP":[1,r'\OSP'], "Template-CablePlacement":[2,r'\OSP']}
        LayoutV = GISLayouts[Layout]
        LryNum = LayoutV[0]
        ImagePath = LayoutV[1]
        OutputPath = r"C:\Users\max.beuvelet\Desktop\FTTH Project"
        

    TQLayers = TQData.layers[1]
    #query featuers 
    TQFeatureSet = TQLayers.query(where='OrderNumber='+Number_Order,out_fields='OBJECTID')
    #get object ids
    ObjIDs = [x.attributes['OBJECTID'] for x in TQFeatureSet]
    #print(ObjIDs)
    image_list = []


    for ids in ObjIDs:
        arcpy.AddMessage(ids)
        attach = TQLayers.attachments.get_list(oid=ids)
        for att in attach:
            DwnFile = TQLayers.attachments.download(oid=ids, attachment_id=att['id'],save_path=OutputPath+ImagePath )
            arcpy.AddMessage(DwnFile)
            index = len(OutputPath+ImagePath)+1
            NewFileName = DwnFile[0]
            NewFileName = NewFileName[:index] +' ' + str(ids) +' ' + NewFileName[index:]
            image_list.append([NewFileName])

            if os.path.exists(NewFileName):
                os.remove(NewFileName)

            os.rename(DwnFile[0],NewFileName)
            rotate_image(NewFileName)
            

            
    #adds the images into the pdf
    #print(image_list)
    for row in image_list:
        pdf.add_page()
        #print(row)
        for x in row:
            #rotate_image(x)
            pdf.cell(200, 10, txt = "OSP_Point " + '{}'.format(oid),ln = 1, align = 'L')# code is for adding information above the images
            try:
                pdf.cell(200, 10, txt = "Exterior Sheeting:" + Ext_sheet,ln = 1, align = 'L')
            except:
                pdf.cell(200, 10, txt = "{}".format(""),ln = 2, align = 'L')
            try:
                pdf.multi_cell(200, 10, txt = "Entry Point:" + Entry_Point, align = 'L')
            except:
                pdf.cell(200, 10, txt = "{}".format(""),ln = 2, align = 'L')
            try:
                pdf.multi_cell(200, 10, txt = "Notes:" + Notes, align = 'L')
                #pdf.cell(200, 10, txt = "{}".format(Notes),ln = 2, align = 'L')# try except is used when a NoneType error is given
                pdf.cell(200, 10, txt = "",ln = 1, align = 'L')   
            except:
                pdf.cell(200, 10, txt = "{}".format(""),ln = 2, align = 'L')
            pdf.image("{}".format(x),25,80,w=140)# x and y move the image up,down,left or right, w increases or decrease size
            #pdf.add_page()

    

    layers = FTTH_layers[2]
    layers_fset = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    layers_features = layers_fset.features
    query_results = layers.query(where= "OrderNumber = {} ".format(Number_Order))
    pdf.set_font("Times", size = 15)

    note = layers_features[0].attributes.pop('Notes')

    #pdf.add_page()
    TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
    templates ={"FTTH_TQ_CablePlacement":"Template-CablePlacement","FTTH_TQ_ISP":"Template-ISP","FTTH_TQ_OSP":"Template-OSP"}
    for l in templates:

        Layout = templates[l]

        #getting Attachments from AGO
        #Feature Server
        TQData = gis.content.get('e3796b16d9484709963a1cc2984cf325')
        #Layout Variables
        GISLayouts={"Template-ISP":[0,r'\ISP'], "Template-OSP":[1,r'\OSP'], "Template-CablePlacement":[2,r'\OSP']}
        LayoutV = GISLayouts[Layout]
        LryNum = LayoutV[0]
        ImagePath = LayoutV[1]
        OutputPath = r"C:\Users\max.beuvelet\Desktop\FTTH Project"
        
#---------- Referencing Exterior Line-------------------

    TQLayers = TQData.layers[2]
    #query featuers 
    TQFeatureSet = TQLayers.query(where='OrderNumber='+Number_Order,out_fields='OBJECTID')
    #get object ids
    ObjIDs = [x.attributes['OBJECTID'] for x in TQFeatureSet]
    #print(ObjIDs)
    image_list = []


    for ids in ObjIDs:
        arcpy.AddMessage(ids)
        attach = TQLayers.attachments.get_list(oid=ids)
        for att in attach:
            DwnFile = TQLayers.attachments.download(oid=ids, attachment_id=att['id'],save_path=OutputPath+ImagePath )
            arcpy.AddMessage(DwnFile)
            index = len(OutputPath+ImagePath)+1
            NewFileName = DwnFile[0]
            NewFileName = NewFileName[:index] +' ' + str(ids) +' ' + NewFileName[index:]
            image_list.append([NewFileName])

            if os.path.exists(NewFileName):
                os.remove(NewFileName)

            os.rename(DwnFile[0],NewFileName)
            rotate_image(NewFileName)

            
    #adds the images into the pdf
    for row in image_list:
        pdf.add_page()
        for x in row:
            pdf.multi_cell(200, 10, txt = "Notes:" + note, align = 'L')
            pdf.image("{}".format(x),20,50,w=160)# x and y move the image up,down,left or right, w increases or decrease size
            #pdf.add_page()
    pdf.output('eno.pdf')

    
    #Orientates the image 
def rotate_image(ImgFile):
    try:
        image=Image.open(ImgFile)

        for orientation in ExifTags.TAGS.keys():
            if ExifTags.TAGS[orientation]=='Orientation':
                break

        exif = image._getexif()
        #print(exif)
        #print(exif[orientation])

        if exif[orientation] == 3:
            image=image.rotate(180, expand=True)
        elif exif[orientation] == 6:
            image=image.rotate(270, expand=True)
        elif exif[orientation] == 8:
            image=image.rotate(90, expand=True)

        image.save(ImgFile)
        image.close()
    except (AttributeError, KeyError, IndexError):
        # cases: image don't have getexif
        pass
    


install_area()        
exterior_point()
exterior_line()
picture()
